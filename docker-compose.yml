services:
  eureka-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://eureka-server:8761/eureka/" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app-network

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    depends_on:
      - eureka-server
      - user-service
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      JWT_SECRET_KEY: "7Iqk7YyM66W07YOA7L2U65Sp7YG065+9U3ByaW5n6rCV7J2Y7Yqc7YSw7LWc7JuQ67mI7J6F64uI64ukLg=="
    ports:
      - "9000:9000"
    networks:
      - app-network

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    env_file:
      - .env  # .env 파일을 Docker 컨테이너에 로드
    container_name: user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://madeby-db:3306/user_service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - madeby-db
    ports:
      - "8082:8082"
    networks:
      - app-network

  cart-service:
    container_name: cart-service
    build:
      context: .
      dockerfile: cart-service/Dockerfile
    env_file:
      - .env  # .env 파일을 Docker 컨테이너에 로드
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://madeby-db:3306/cart_service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - madeby-db
    ports:
      - "8083:8083"
    networks:
      - app-network

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    env_file:
      - .env  # .env 파일을 Docker 컨테이너에 로드
    container_name: order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://madeby-db:3306/order_service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - madeby-db
    ports:
      - "8084:8084"
    networks:
      - app-network

  product-service:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    env_file:
      - .env  # .env 파일을 Docker 컨테이너에 로드
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://madeby-db:3306/product_service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - madeby-db
    ports:
      - "8085:8085"
    networks:
      - app-network

  madeby-db:
    image: mysql:8.0
    container_name: madeby-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # MySQL root 비밀번호
      MYSQL_DATABASE: default_db
    ports:
      - "3309:3306" # user-service용 MySQL 포트
    networks:
      - app-network
    volumes:
      - madeby-db-data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # 초기화 스크립트 마운트

  redis:
    image: redis:7.0
    container_name: redis-container
    restart: always
    ports:
      - "${REDIS_PORT}:6379" # 로컬 6379 포트를 컨테이너의 6379 포트로 매핑
    command: ["redis-server", "--appendonly", "yes"] # 영속성을 위한 AOF 설정
    volumes:
      - redis-data:/data # Redis 데이터 영속성
    networks:
      - app-network

volumes:
  madeby-db-data:
  redis-data:

networks:
  app-network:
    driver: bridge